----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0))),NodeByLabelScan(IdName(n),Right(LabelId(20)),Set())), Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0)), HasLabels(Identifier(n),List(LabelName(Event)))),AllNodesScan(IdName(n),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0))),NodeByLabelScan(IdName(n),Right(LabelId(20)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(m),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(m),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0))),NodeByLabelScan(IdName(n),Right(LabelId(20)),Set())),IdName(n),OUTGOING,OUTGOING,List(RelTypeName(Location)),IdName(m),IdName(  UNNAMED16),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0)), HasLabels(Identifier(n),List(LabelName(Event)))),Expand(AllNodesScan(IdName(m),Set()),IdName(m),INCOMING,OUTGOING,List(RelTypeName(Location)),IdName(n),IdName(  UNNAMED16),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(LessThanOrEqual(Property(Identifier(n),PropertyKeyName(Year)),Parameter(  AUTOINT0))),NodeByLabelScan(IdName(n),Right(LabelId(20)),Set())),IdName(n),OUTGOING,OUTGOING,List(RelTypeName(Location)),IdName(m),IdName(  UNNAMED16),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


