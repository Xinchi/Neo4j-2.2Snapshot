############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
Implementing Serializable
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
PlannerQuery toString
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,r2,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [p,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,r2,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
patternNodes = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2),IdName(r1),]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### Test ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### Test ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1),IdName(r2),]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

############################### org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection ############################### 
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [  UNNAMED46,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,  UNNAMED46,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--------- NODE ----------
patternRelationships = []
patternNodes = [friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,r2,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,friend_of_a_friend,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r2,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend,r1,user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [r1,r2,]
dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [friend_of_a_friend,friend,user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeIndexSeek
NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(user),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
