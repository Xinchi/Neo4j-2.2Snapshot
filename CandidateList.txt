----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))

----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = CandidateList(List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))

----------------- ++ -----------------
other = CandidateList(List(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(List(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream(Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()), ?))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))))

----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = CandidateList(List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))))

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(List())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(Stream())

----------------- ++ -----------------
other = CandidateList(ArrayBuffer())
New CandidateList = CandidateList(ArrayBuffer())

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())

Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- ++ -----------------
other = 
New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer())))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer())))



----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- ++ -----------------
other = 
New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = 
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())



----------------- + -----------------
plan = Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())

Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())
New CandidateList = Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())

Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())



----------------- ++ -----------------
other = NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- ++ -----------------
other = 
New CandidateList = Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())

Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())

NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))

NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))



----------------- + -----------------
plan = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))
New CandidateList = Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())))

Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))



----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- ++ -----------------
other = 
New CandidateList = 

----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@77e5fb38,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@77e5fb38,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@77e5fb38,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@3611cdd8,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@3611cdd8,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@3611cdd8,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@3611cdd8,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@1fca3855,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@1fca3855,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@1fca3855,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@1fca3855,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@1fca3855,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e224bc4,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


<function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


<function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


<function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


<function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


<function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@25e4dd13,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


<function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(friend),Set()))


<function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


<function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


<function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


<function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@17c7947e,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


<function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


<function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


ArrayBuffer(AllNodesScan(IdName(friend),Set()))


<function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


<function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


<function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


<function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@10c77c59,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@73671713,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


Stream()


<function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@39e6ea75,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@39e6ea75,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@39e6ea75,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@13811405,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@13811405,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@13811405,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@13811405,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@d4ebcda,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@d4ebcda,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@d4ebcda,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@d4ebcda,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@d4ebcda,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@639f1d9f,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@12bd467b,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@19527f4a,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@8f2fd20,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@ff5eba5,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@7fc42ca3,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@7fc42ca3,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@7fc42ca3,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Map, Node, Relationship))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@78b6c9c2,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@78b6c9c2,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@78b6c9c2,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@78b6c9c2,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@58f46cbf,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@58f46cbf,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@58f46cbf,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@58f46cbf,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@58f46cbf,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),None), HasLabels(Identifier(p),List(LabelName(Person))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(p) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Property(Identifier(p),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@21afcb14,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@4a943103,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(  UNNAMED46) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@233f767,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context = LogicalPlanningContext(org.neo4j.cypher.internal.spi.v2_2.TransactionBoundPlanContext@6ec8f4be,Metrics(<function2>,<function2>,<function2>,<function1>),SemanticTable(Map(Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),None), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(user) -> ExpressionTypeInfo(TypeSpec(Node),Some(TypeSpec(Node))), Property(Identifier(user),PropertyKeyName(name)) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), Parameter(  AUTOSTRING0) -> ExpressionTypeInfo(TypeSpec(T),Some(TypeSpec(T))), NotEquals(Identifier(r1),Identifier(r2)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend) -> ExpressionTypeInfo(TypeSpec(Node),None), Identifier(r1) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(r2) -> ExpressionTypeInfo(TypeSpec(Relationship),Some(TypeSpec(T))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), Identifier(friend_of_a_friend) -> ExpressionTypeInfo(TypeSpec(Node),None), And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))), HasLabels(Identifier(user),List(LabelName(User))) -> ExpressionTypeInfo(TypeSpec(Boolean),Some(TypeSpec(Boolean))))),org.neo4j.cypher.internal.compiler.v2_2.planner.logical.GreedyQueryGraphSolver@3e4173e,QueryGraphCardinalityInput(Map(),Cardinality(1.0)))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))), NodeHashJoin(Set(IdName(friend)),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer()))))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Left(Person),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(NodeIndexSeek(IdName(p),LabelToken(Person,LabelId(1)),PropertyKeyToken(name,PropertyKeyId(0)),ManyQueryExpression(Collection(List(Parameter(  AUTOSTRING0)))),Set()), Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(p),List(LabelName(Person))), In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(p),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(p),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(  UNNAMED46),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(  UNNAMED46),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()), NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer())), NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend_of_a_friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend_of_a_friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),AllNodesScan(IdName(user),Set())))


costs = <function2>


Return = Some(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = ArrayBuffer(AllNodesScan(IdName(friend),Set()))


costs = <function2>


Return = Some(AllNodesScan(IdName(friend),Set()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()), Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


costs = <function2>


Return = Some(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()), Selection(ArrayBuffer(HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())))


costs = <function2>


Return = Some(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = List(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2)), HasLabels(Identifier(user),List(LabelName(User))), In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),Expand(Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()))), Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,ArrayBuffer()))))


costs = <function2>


Return = Some(Selection(ArrayBuffer(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(ArrayBuffer(In(Property(Identifier(user),PropertyKeyName(name)),Collection(List(Parameter(  AUTOSTRING0))))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,ArrayBuffer()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,ArrayBuffer())))


----------------- bestPlan -----------------
context.cardinalityInput = 
QueryGraphCardinalityInput(Map(),Cardinality(1.0))


plans = Stream()


costs = <function2>


Return = None


