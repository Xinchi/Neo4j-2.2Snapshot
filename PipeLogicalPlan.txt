org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = []
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [p,]
argumentIds = []
selections = [dependency = [p,]
dependency = [p,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [p,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,  UNNAMED46,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,  UNNAMED46,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(  UNNAMED46)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(  UNNAMED46),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,  UNNAMED46,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.execution.PipeExecutionPlanBuilder
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = []
patternNodes = [user,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [user,r1,friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [r2,r1,friend,user,friend_of_a_friend,]
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection--------- NODE ----------
patternRelationships = [IdName(r1) (IdName(user),IdName(friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,IdName(r2) (IdName(friend),IdName(friend_of_a_friend)) BOTHList(RelTypeName(FRIEND)) SimplePatternLength,]
patternNodes = [user,friend,friend_of_a_friend,]
argumentIds = []
selections = [dependency = [user,]
dependency = [user,]
dependency = [r1,r2,]
]
optionalMatches = []
hints size = 0
shortestPathPatterns size = 0
availableSymbols = [friend_of_a_friend,]

org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(LoadCSV(true,StringLiteral(file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv),Identifier(csvLine),None), Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(p)),List(LabelName(Person)),Some(MapExpression(List((PropertyKeyName(id),FunctionInvocation(FunctionName(toInt),false,Vector(Property(Identifier(csvLine),PropertyKeyName(id))))), (PropertyKeyName(name),Property(Identifier(csvLine),PropertyKeyName(name)))))),false)))))))),LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name}),Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(CreateIndex(LabelName(Country),PropertyKeyName(name)),CREATE INDEX ON :Country(name),Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(LoadCSV(true,StringLiteral(file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv),Identifier(csvLine),None), Merge(Pattern(List(EveryPath(NodePattern(Some(Identifier(country)),List(LabelName(Country)),Some(MapExpression(List((PropertyKeyName(name),Property(Identifier(csvLine),PropertyKeyName(country)))))),false)))),List()), Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(movie)),List(LabelName(Movie)),Some(MapExpression(List((PropertyKeyName(id),FunctionInvocation(FunctionName(toInt),false,Vector(Property(Identifier(csvLine),PropertyKeyName(id))))), (PropertyKeyName(title),Property(Identifier(csvLine),PropertyKeyName(title))), (PropertyKeyName(year),FunctionInvocation(FunctionName(toInt),false,Vector(Property(Identifier(csvLine),PropertyKeyName(year)))))))),false))))), Create(Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(movie)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(MADE_IN)),None,None,OUTGOING),NodePattern(Some(Identifier(country)),List(),None,false))))))))),LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country),Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(CreateUniqueConstraint(Identifier(person),LabelName(Person),Property(Identifier(person),PropertyKeyName(id))),CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE,Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(CreateUniqueConstraint(Identifier(movie),LabelName(Movie),Property(Identifier(movie),PropertyKeyName(id))),CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE,Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(Some(PeriodicCommitHint(None)),SingleQuery(List(LoadCSV(true,StringLiteral(file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv),Identifier(csvLine),None), Match(false,Pattern(List(EveryPath(NodePattern(Some(Identifier(person)),List(),None,false)), EveryPath(NodePattern(Some(Identifier(movie)),List(),None,false)))),List(),Some(Where(And(And(And(Equals(Property(Identifier(person),PropertyKeyName(id)),FunctionInvocation(FunctionName(toInt),false,Vector(Property(Identifier(csvLine),PropertyKeyName(personId))))),HasLabels(Identifier(person),List(LabelName(Person)))),Equals(Property(Identifier(movie),PropertyKeyName(id)),FunctionInvocation(FunctionName(toInt),false,Vector(Property(Identifier(csvLine),PropertyKeyName(movieId)))))),HasLabels(Identifier(movie),List(LabelName(Movie))))))), Create(Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(person)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(PLAYED)),None,Some(MapExpression(List((PropertyKeyName(role),Property(Identifier(csvLine),PropertyKeyName(role)))))),OUTGOING),NodePattern(Some(Identifier(movie)),List(),None,false))))))))),USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie),Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(DropUniqueConstraint(Identifier(person),LabelName(Person),Property(Identifier(person),PropertyKeyName(id))),DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE,Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(DropUniqueConstraint(Identifier(movie),LabelName(Movie),Property(Identifier(movie),PropertyKeyName(id))),DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE,Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(NodePattern(Some(Identifier(n)),List(),None,false)))),List(),Some(Where(Or(HasLabels(Identifier(n),List(LabelName(Person))),HasLabels(Identifier(n),List(LabelName(Movie))))))), Remove(List(RemovePropertyItem(Property(Identifier(n),PropertyKeyName(id)))))))),MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id,Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(adam)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING0))))),false))))), Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(pernilla)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING1))))),false))))), Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(david)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING2))))),false))))), Create(Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(adam)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(FRIEND)),None,None,OUTGOING),NodePattern(Some(Identifier(pernilla)),List(),None,false)))))), Create(Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(pernilla)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(FRIEND)),None,None,OUTGOING),NodePattern(Some(Identifier(david)),List(),None,false))))))))),CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david),Map(  AUTOSTRING0 -> Adam,   AUTOSTRING2 -> David,   AUTOSTRING1 -> Pernilla),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(NodePattern(Some(Identifier(p)),List(),None,false)))),List(),Some(Where(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))))), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(p),Identifier(p)))),None,None,None)))),MATCH (p {name:"Pernilla"})
RETURN p,Map(  AUTOSTRING0 -> Pernilla),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(NodePattern(Some(Identifier(p)),List(),None,false)))),List(),Some(Where(And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person))))))), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(p),Identifier(p)))),None,None,None)))),MATCH (p:Person {name:"Pernilla"})
RETURN p,Map(  AUTOSTRING0 -> Pernilla),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(CreateIndex(LabelName(Person),PropertyKeyName(name)),CREATE INDEX ON :Person(name),Map(),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(NodePattern(Some(Identifier(p)),List(),None,false)))),List(),Some(Where(And(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(p),List(LabelName(Person))))))), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(p),Identifier(p)))),None,None,None)))),MATCH (p:Person {name:"Pernilla"})
RETURN p,Map(  AUTOSTRING0 -> Pernilla),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Create(Pattern(List(EveryPath(NodePattern(Some(Identifier(adam)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING0))))),false)), EveryPath(NodePattern(Some(Identifier(pernilla)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING1))))),false)), EveryPath(NodePattern(Some(Identifier(david)),List(LabelName(User)),Some(MapExpression(List((PropertyKeyName(name),Parameter(  AUTOSTRING2))))),false)), EveryPath(RelationshipChain(NodePattern(Some(Identifier(adam)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(FRIEND)),None,None,OUTGOING),NodePattern(Some(Identifier(pernilla)),List(),None,false))), EveryPath(RelationshipChain(NodePattern(Some(Identifier(pernilla)),List(),None,false),RelationshipPattern(None,false,List(RelTypeName(FRIEND)),None,None,OUTGOING),NodePattern(Some(Identifier(david)),List(),None,false))))))))),CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david),Map(  AUTOSTRING1 -> Pernilla,   AUTOSTRING2 -> David,   AUTOSTRING0 -> Adam),Normal)
### END OF DETAILS ###
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(RelationshipChain(RelationshipChain(NodePattern(Some(Identifier(user)),List(),None,false),RelationshipPattern(Some(Identifier(r1)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(  UNNAMED46)),List(),None,false)),RelationshipPattern(Some(Identifier(r2)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(friend_of_a_friend)),List(),None,false))))),List(),Some(Where(And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2)))))), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(friend_of_a_friend),Identifier(friend_of_a_friend)))),None,None,None)))),MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend,Map(  AUTOSTRING0 -> Adam),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(user)),List(),None,false),RelationshipPattern(Some(Identifier(r1)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(friend)),List(),None,false))))),List(),Some(Where(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User))))))), Match(false,Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(friend)),List(),None,false),RelationshipPattern(Some(Identifier(r2)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(friend_of_a_friend)),List(),None,false))))),List(),None), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(friend_of_a_friend),Identifier(friend_of_a_friend)))),None,None,None)))),MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend,Map(  AUTOSTRING0 -> Adam),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
PreparedQuery(Query(None,SingleQuery(List(Match(false,Pattern(List(EveryPath(RelationshipChain(NodePattern(Some(Identifier(user)),List(),None,false),RelationshipPattern(Some(Identifier(r1)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(friend)),List(),None,false))), EveryPath(RelationshipChain(NodePattern(Some(Identifier(friend)),List(),None,false),RelationshipPattern(Some(Identifier(r2)),false,List(RelTypeName(FRIEND)),None,None,BOTH),NodePattern(Some(Identifier(friend_of_a_friend)),List(),None,false))))),List(),Some(Where(And(And(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0)),HasLabels(Identifier(user),List(LabelName(User)))),NotEquals(Identifier(r1),Identifier(r2)))))), Return(false,ReturnItems(false,List(AliasedReturnItem(Identifier(friend_of_a_friend),Identifier(friend_of_a_friend)))),None,None,None)))),MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend,Map(  AUTOSTRING0 -> Adam),Normal)
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())))),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(  UNNAMED46)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())))
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r2),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(  UNNAMED46),Set()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(  UNNAMED46),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())))),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeHashJoin
NodeHashJoin(Set(IdName(friend)),Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector()),Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())))
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend_of_a_friend),Set()),IdName(friend_of_a_friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r2),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend_of_a_friend),Set())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(HasLabels(Identifier(user),List(LabelName(User))), Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(AllNodesScan(IdName(friend),Set()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(user),IdName(r1),SimplePatternLength,Vector())
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(friend),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/persons.csv" AS csvLine
CREATE (p:Person {id: toInt(csvLine.id), name: csvLine.name})
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE INDEX ON :Country(name)
### END OF DETAILS ###
### QUERY DETAILS ###
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/movies.csv" AS csvLine
MERGE (country:Country {name: csvLine.country})
CREATE (movie:Movie {id: toInt(csvLine.id), title: csvLine.title, year:toInt(csvLine.year)})
CREATE (movie)-[:MADE_IN]->(country)
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:/Users/Max1/Dropbox/UCSD/MSProject/neo4j/community/cypher/docs/cypher-docs/src/docs/graphgists/import/roles.csv" AS csvLine
MATCH (person:Person { id: toInt(csvLine.personId)}),(movie:Movie { id: toInt(csvLine.movieId)})
CREATE (person)-[:PLAYED { role: csvLine.role }]->(movie)
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (person:Person) ASSERT person.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
DROP CONSTRAINT ON (movie:Movie) ASSERT movie.id IS UNIQUE
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (n) WHERE n:Person OR n:Movie REMOVE n.id
### END OF DETAILS ###
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'})
CREATE (pernilla:User {name: 'Pernilla'})
CREATE (david:User {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),AllNodesScan(IdName(p),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.AllNodesScan
AllNodesScan(IdName(p),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Left(Person),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Left(Person),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE INDEX ON :Person(name)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (p:Person {name:"Pernilla"})
RETURN p
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(p),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(p),Right(LabelId(1)),Set()))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(p),Right(LabelId(1)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
CREATE (adam:User {name: 'Adam'}),
  (pernilla:User {name: 'Pernilla'}),
  (david:User {name: 'David'}),
  (adam)-[:FRIEND]->(pernilla),
  (pernilla)-[:FRIEND]->(david)
### END OF DETAILS ###
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-()-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector()),IdName(  UNNAMED46),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(  UNNAMED46),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend)
MATCH (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
### QUERY DETAILS ###
MATCH (user:User {name: 'Adam'})-[r1:FRIEND]-(friend),
      (friend)-[r2:FRIEND]-(friend_of_a_friend)
RETURN friend_of_a_friend
### END OF DETAILS ###
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
------------------------ DETAILS OF THE ABOVE TREE ------------------------
org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Projection
Projection(Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())),Map(friend_of_a_friend -> Identifier(friend_of_a_friend)))
-org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(NotEquals(Identifier(r1),Identifier(r2))),Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector()))
--org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector()),IdName(friend),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend_of_a_friend),IdName(r2),SimplePatternLength,Vector())
---org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Expand
Expand(Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())),IdName(user),BOTH,BOTH,List(RelTypeName(FRIEND)),IdName(friend),IdName(r1),SimplePatternLength,Vector())
----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.Selection
Selection(Vector(Equals(Property(Identifier(user),PropertyKeyName(name)),Parameter(  AUTOSTRING0))),NodeByLabelScan(IdName(user),Right(LabelId(0)),Set()))
-----org.neo4j.cypher.internal.compiler.v2_2.planner.logical.plans.NodeByLabelScan
NodeByLabelScan(IdName(user),Right(LabelId(0)),Set())
------------------------ END OF DETAILS ------------------------
